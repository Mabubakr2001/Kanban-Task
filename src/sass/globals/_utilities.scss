@use "./functions" as *;
@use "../variables/colors" as c;
@use "../variables/transitions" as t;

.add-task-btn {
  background-color: map-get(c.$colors, main);
  border-radius: 20px;
  display: flex;
  align-items: center;
  padding: rem(12px) rem(20px);
  color: map-get(c.$colors, main_2);
  transition: t.$mainTransition;
  @at-root body[data-mode="dark"] &:hover {
    background-color: map-get(c.$colors, main_2);
    color: map-get(c.$colors, main);
    svg {
      fill: map-get(c.$colors, main);
    }
  }
  @at-root body[data-mode="light"] &:hover {
    background-color: map-get(c.$colors, sub);
  }
  h3 {
    font-size: rem(18px);
    font-weight: 700;
  }
}

.window {
  padding: rem(30px);
  font-weight: 700;
  overflow-y: scroll;
  width: rem(480px);
  max-height: 95vh;
  height: fit-content;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  border-radius: 10px;
  z-index: 1000;
  h3 {
    margin-bottom: rem(20px);
  }
  @at-root body[data-mode="light"] & {
    background-color: map-get(c.$colors, main_2);
    color: map-get(c.$colors, blackColor);
  }
  @at-root body[data-mode="dark"] & {
    background-color: map-get(c.$colors, sub);
    color: map-get(c.$colors, main_2);
  }
  @at-root .normal-input {
    margin: rem(20px) 0;
    > {
      h4 {
        margin-bottom: rem(10px);
        font-size: rem(15px);
      }
    }
    @at-root .input-error {
      color: red;
      font-size: rem(14px);
      font-weight: 500;
      margin-top: 7px;
    }
  }
  @at-root .editable-input {
    > {
      h4 {
        margin-bottom: rem(10px);
        font-size: rem(15px);
      }
    }
    .editable-input-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
      height: rem(40px);
      margin-bottom: rem(10px);
      &:last-child {
        margin-bottom: 0;
      }
      > {
        input {
          width: 90%;
          height: 100%;
          border-radius: 5px;
          padding: 0 rem(10px);
        }
        img {
          width: 30px;
          height: 30px;
          cursor: pointer;
        }
      }
      .task-input {
        width: 82%;
      }
    }
  }
  button {
    @extend .add-task-btn;
    width: 90%;
    margin: 0 auto;
    height: 45px;
    justify-content: center;
    font-size: rem(17px);
    padding: 0;
  }

  .add-new-editable-input-content-btn {
    margin: rem(15px) auto;
  }
}

.overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: #00000069;
}

.available-columns-select {
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: rem(40px);
  background-color: #828d9c54;
  border-radius: 10px;
  padding: 0 rem(15px);
  cursor: pointer;
  > {
    input {
      pointer-events: none;
      font-size: 17px;
      font-weight: 600;
      padding: 0;
    }
    svg {
      transition: transform t.$mainTransition;
    }
  }
  @at-root &[data-state="visible"] {
    svg {
      transform: rotate(-180deg);
    }
    ~ .available-columns {
      pointer-events: all;
      height: 120px;
    }
  }
  @at-root &[data-state="hidden"] {
    ~ .available-columns {
      pointer-events: none;
      height: 0;
    }
  }
}

.available-columns {
  display: flex;
  flex-direction: column;
  margin: 5px 0 10px 0;
  line-height: 1.7;
  background-color: #828d9c54;
  border-radius: 10px;
  height: 120px;
  transition: height t.$mainTransition;
  overflow-y: scroll;
  scrollbar-gutter: stable;
  > {
    span {
      border-radius: 10px;
      min-height: 40px;
      padding: 0 rem(15px);
      cursor: pointer;
      display: flex;
      align-items: center;
      &:hover {
        background-color: map-get(c.$colors, main);
      }
    }
  }
}
.task-info-window {
  .task-manipulation {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: rem(25px);
    > {
      span {
        font-size: rem(20px);
      }
    }
  }
  .task-description {
    color: map-get(c.$colors, sub_2);
    margin-bottom: rem(25px);
    line-height: 1.4;
  }
  .all-subtasks {
    .hint {
      margin-top: 20px;
      display: flex;
      justify-content: center;
      > {
        svg {
          margin-right: 7px;
        }
        p {
          text-align: center;
          letter-spacing: 1px;
          color: map-get(c.$colors, main);
        }
      }
    }
    .subtask {
      background-color: map-get(c.$colors, sub_3);
      display: flex;
      align-items: center;
      padding: 12px 0 12px 12px;
      border-radius: 5px;
      cursor: pointer;
      margin-top: 10px;
      &:hover {
        background-color: #7c67c78a;
      }
      > {
        input {
          margin-right: 15px;
        }
        label {
          font-size: 15px;
          pointer-events: none;
        }
      }
      &[data-state="waiting"] {
        label {
          color: map-get(c.$colors, main_2);
          text-decoration: none;
        }
      }
      &[data-state="done"] {
        label {
          color: map-get(c.$colors, sub_2);
          text-decoration: line-through;
        }
      }
    }
  }
  .current-column {
    margin-top: 20px;
    > {
      span {
        display: block;
        margin-bottom: 10px;
        font-size: 16px;
      }
      input {
        pointer-events: none;
      }
    }
  }
}

.basic-manipulating {
  position: absolute;
  transform: translate(-50%, -50%);
  background-color: map-get(c.$colors, sub_3);
  border-radius: 10px;
  display: flex;
  justify-content: center;
  flex-direction: column;
  width: 200px;
  height: 100px;
  padding-left: 15px;
  z-index: 100000;
  .edit {
    margin-bottom: 15px;
    color: map-get(c.$colors, sub_2);
    cursor: pointer;
    width: fit-content;
    position: relative;
    &::after {
      content: "";
      position: absolute;
      left: 0;
      bottom: 0;
      width: 0;
      height: 1px;
      transition: t.$mainTransition;
      background-color: map-get(c.$colors, sub_2);
    }
    &:hover::after {
      width: 100%;
    }
  }
  .delete {
    width: fit-content;
    cursor: pointer;
    color: red;
    position: relative;
    &::after {
      content: "";
      position: absolute;
      left: 0;
      bottom: 0;
      width: 0;
      height: 1px;
      transition: t.$mainTransition;
      background-color: red;
    }
    &:hover::after {
      width: 100%;
    }
  }
}

.board-basic-manipulation {
  top: 120px;
  right: -80px;
}
